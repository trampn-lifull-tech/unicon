<?php

use Doctrine\DBAL\Platforms\AbstractPlatform;
use Doctrine\DBAL\Types\ConversionException;
use Doctrine\DBAL\Types\Type;

/**
 * Class MediumIntType
 * @author ntd1712
 */
final class MediumIntType extends Type
{
    /**
     * {@inheritdoc}
     *
     * @param   mixed $value The value to convert.
     * @param   \Doctrine\DBAL\Platforms\AbstractPlatform $platform The currently used database platform.
     * @return  null|int The PHP representation of the value.
     * @throws  \Doctrine\DBAL\Types\ConversionException
     */
    public function convertToPHPValue($value, AbstractPlatform $platform)
    {
        if (is_object($value)) {
            throw ConversionException::conversionFailed($value, $this);
        }

        return null === $value ? null : (int) $value;
    }

    /**
     * {@inheritdoc}
     *
     * @param   array $fieldDeclaration The field declaration.
     * @param   \Doctrine\DBAL\Platforms\AbstractPlatform $platform The currently used database platform.
     * @return  string
     */
    public function getSQLDeclaration(array $fieldDeclaration, AbstractPlatform $platform)
    {
        switch ($platform->getName()) {
            case 'mysql':
                return strtoupper($this->getName())
                    . (isset($fieldDeclaration['unsigned']) && $fieldDeclaration['unsigned'] ? ' UNSIGNED' : '');
            default:
                return $platform->getIntegerTypeDeclarationSQL($fieldDeclaration);
        }
    }

    /**
     * {@inheritdoc}
     *
     * @return  string
     */
    public function getName()
    {
        return 'mediumint';
    }

    /**
     * {@inheritdoc}
     *
     * @return  int
     */
    public function getBindingType()
    {
        return \PDO::PARAM_INT;
    }
}
